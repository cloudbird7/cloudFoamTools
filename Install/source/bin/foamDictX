#!/bin/bash
#------------------------------------------------------------------------------
#                 ____    ___                       __     
#                /\  _`\ /\_ \                     /\ \    
#                \ \ \/\_\//\ \     ___   __  __   \_\ \   
#                 \ \ \/_/_\ \ \   / __`\/\ \/\ \  /'_` \  
#                  \ \ \L\ \\_\ \_/\ \L\ \ \ \_\ \/\ \L\ \ 
#                   \ \____//\____\ \____/\ \____/\ \___,_\
#                    \/___/ \/____/\/___/  \/___/  \/__,_ /
#
#                             CloudBird‘s CodeLib
#
#------------------------------------------------------------------------------
#
#       Name:         foamDictX         Version:        1.02
#       Language:     sh                UpdateDate:     20200614    
#
#       Description:
#       Check and set  the OpenFOAM case configuration with a AllDictList file
#
#       Writer:       CloudBird         cloudbird7@foxmail.com
#
#------------------------------------------------------------------------------

#输出帮助信息
usage() {
    cat<<USAGE

Usage: foamDictX OPTION 

options:
  -help     | -h         print the usage
  -set      | -s         set the dictionaries from AllDictList file
  -check    | -c         check the case configuration from AllDictList file

Please create a new file called \"AllDictList\" in the case root path.
The structure of AllDictList file should be like this:
        dictName keyName=value
        e.g. , system/fvSchemes ddtSchemes.default=CrankNicolson 0.9"


USAGE
}

NORMAL=$(tput sgr0)
GREEN=$(tput setaf 2; tput bold)
RED=$(tput setaf 1)

#定义输出红色与绿色文字的功能
printRed()
{
     echo -e "$RED$1$NORMAL"
} 

printGreen()
 {
     echo -e "$GREEN$1$NORMAL"
}

#定义错误退出功能
error() {        
    exec 1>&2
    while [ "$#" -ge 1 ]; do printRed "$1"; shift; done
    usage                                              
    exit 1                                                                    
}  

#定义读字典函数                                                                           
readDict()
{
    foamDictionary -disableFunctionEntries -entry "$1" -value $2
}

#定义写字典函数                                                                           
writeDict()
{    
    foamDictionary -entry "$1" $2 -set "$3"
}

#批量设置字典功能
set_()
{
     while read line
     do
          #屏蔽注释文本
          if [ "${line:0:1}" != "#" ]
          then
               wholename=`echo $line | cut -d \= -f 1`
               value=`echo $line | cut -d \= -f 2`
               dictName=`echo $wholename | cut -d \  -f 1`
               keyName=`echo $wholename | cut -d \  -f 2`

               echo "Setting $keyName from $dictName"
               writeDict "$keyName" "$dictName" "$value"
          fi
     done < "AllDictList"
     printGreen "Setup completed"
}

#检查功能
check_()
{
     #statue变量用来存储错误的个数
     export statue=0
     echo "  "
     while read line
     do
          #屏蔽注释文本
          if [ "${line:0:1}" != "#" ]
          then
               wholename=`echo $line | cut -d \= -f 1`
               value=`echo $line | cut -d \= -f 2`
               dictName=`echo $wholename | cut -d \  -f 1`
               keyName=`echo $wholename | cut -d \  -f 2`
               valueFromDict=$(readDict $keyName $dictName)

               echo "Checking $keyName from $dictName ......" 
               if [ "$valueFromDict" == "$value" ]
               then
                    echo "Passed"
               else
                    printRed "FIND ERROR: The value should be \"$value\" but find \"$valueFromDict\" in dictFile" 
                    let "statue++"
               fi
               echo "   "
          fi
     done < "AllDictList"

     if [ "$statue" -eq "0" ]
     then
          printGreen "All items has passed the inspection!"
     else
          if [ "$statue" -eq "1" ]
          then
               printRed "Found $statue error, check failed!"
          else
               printRed "Found $statue errors, check failed!"
          fi
          echo "   "
          read -p "Do you want to set the correct value from AllDictList file?  [Y/N]: " yn
          test $yn = "y" -o $yn = "Y" && set_
     fi
}

#检查配置文件是否存在
if [ ! -f "AllDictList" ]; then
error "Error: AllDictList file doesn't exit!"
fi

if  [ "$#" -eq 0 ]
then
     error "Error: you have to input at least one option"
fi
while [ "$#" -gt 0 ]
do
    case "$1" in
    -h | -help)
        usage && exit 0
        ;;
    -c | -check)
        check_
        shift 1
        ;;
    -s | -set)
        set_
        shift 1
        ;;
    -*)
        error "Error: unknown option: '$*'"
        ;;
    *)
        error "Error: please input an option word as follows:"
        ;;
    esac
done
